import { Container, interfaces } from 'inversify';
import { Dispatcher, EventTypes } from './Dispatcher';
import EventEmitter from 'eventemitter3';
import { Api } from '@codex/api';
import { IConfig } from '../interfaces';
import { ComponentType } from 'react';
import { SyncHook } from 'tapable';
import { Store } from '../stores';
import { Routes } from '../collections/Routes';
import { History } from 'history';
import { url } from '../utils/url';
import { MenuManager } from '../menus';
export declare class Application extends Container {
    protected plugins: Array<(app: this) => void>;
    protected registered: boolean;
    protected booted: boolean;
    protected Component: ComponentType;
    readonly hooks: {
        register: SyncHook<Application>;
        registered: SyncHook<Application>;
        boot: SyncHook<Application>;
        booted: SyncHook<Application>;
    };
    readonly menus: MenuManager;
    readonly events: Dispatcher;
    readonly api: Api;
    readonly store: Store;
    readonly routes: Routes;
    readonly history: History;
    readonly config: IConfig;
    readonly debug: boolean;
    readonly url: typeof url;
    constructor(containerOptions: interfaces.ContainerOptions);
    use(plugin: (app: this) => void): this;
    configure(config: Partial<IConfig>): this;
    register(config: Partial<IConfig>): this;
    boot(Component: ComponentType): this;
    render(Component?: ComponentType, cb?: () => void): this;
    bind<T>(serviceIdentifier: interfaces.ServiceIdentifier<T>, alias?: string): interfaces.BindingToSyntax<T>;
    eventNames(): Array<EventTypes>;
    listeners(event: EventTypes): Array<EventEmitter.ListenerFn>;
    listenerCount(event: EventTypes): number;
    emit(event: EventTypes, ...args: Array<any>): boolean;
    on(event: EventTypes, fn: EventEmitter.ListenerFn, context?: any): Dispatcher;
    addListener(event: EventTypes, fn: EventEmitter.ListenerFn, context?: any): Dispatcher;
    once(event: EventTypes, fn: EventEmitter.ListenerFn, context?: any): Dispatcher;
    removeListener(event: EventTypes, fn?: EventEmitter.ListenerFn, context?: any, once?: boolean): Dispatcher;
    off(event: EventTypes, fn?: EventEmitter.ListenerFn, context?: any, once?: boolean): Dispatcher;
    removeAllListeners(event?: EventTypes): Dispatcher;
}
