import * as React from 'react';
import { MenuManager } from 'menus/MenuManager';
import { api } from '@codex/api';
export declare type IMenuItemItems<T> = string | string[] | T | T[];
export declare class MenuItems<T extends api.MenuItem = api.MenuItem> extends Array<T> implements Array<T> {
    manager: MenuManager;
    constructor(...items: T[]);
    static from(items: any[]): MenuItems;
    first(): T;
    last(): T;
    findBy(key: keyof T, value: any): T | undefined;
    where(key: keyof T, value: any): MenuItems<T>;
    whereNot(key: keyof T, value: any): MenuItems<T>;
    rfilter(predicate: (value: T, index: number, obj: T[]) => boolean): MenuItems<T>;
    rfind(predicate: (value: T, index: number, obj: T[]) => boolean): T | undefined;
    item(id: string): T;
    items(ids?: string[]): MenuItems<T>;
    selected(): MenuItems<T>;
    unselected(): MenuItems<T>;
    expanded(): MenuItems<T>;
    collapsed(): MenuItems<T>;
    ids(): string[];
    collapse(items?: IMenuItemItems<T>): this;
    collapseAll(): this;
    expand(items?: IMenuItemItems<T>): this;
    expandAll(): this;
    select(items?: IMenuItemItems<T>): this;
    deselect(items?: IMenuItemItems<T>): this;
    deselectAll(): this;
    handleClick(item: string | T, e?: React.MouseEvent): void;
    getItems(items?: IMenuItemItems<T>): MenuItems<T>;
    getParentsFor(item: string | T): MenuItems<T>;
    expandParentsForSelected(): void;
    canExpandParentsForSelected(): boolean;
    findActiveFromRoute(): T;
    selectActiveFromRoute(expandParents?: boolean, collapseOthers?: boolean): void;
}
