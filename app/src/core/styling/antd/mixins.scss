@mixin size($width, $height) {
    width  : $width;
    height : $height;
}

@mixin square($size) {
    @include size($size, $size);
}

@mixin reset-component() {
    font-family: $font-family;
    font-size: $font-size-base;
    font-variant: tabular-nums;
    line-height: $line-height-base;
    color: $text-color;
    box-sizing: border-box;
    margin: 0;
    padding: 0;
    list-style: none;
}



@mixin Monospace($important:true) {
    @if($important) {
        font-family: $font-family-monospace !important;
        text-rendering: optimizeLegibility !important;;
    } @else {
        font-family: $font-family-monospace;
        text-rendering: optimizeLegibility;
    }
    font-weight: normal;
    @content
}

@mixin c-icon($icon:false) {
    @include fa-icon();
    vertical-align: -0.08em; // for SVG icon, see https://blog.prototypr.io/align-svg-icons-to-text-and-say-goodbye-to-font-icons-d44b3d7b26b4
    text-align: center;
    text-transform: none;
    line-height: 0;
    text-rendering: optimizeLegibility;
    -webkit-font-smoothing: antialiased;
    -moz-osx-font-smoothing: grayscale;
    //font-family : 'Font Awesome 5 Free', sans-serif;
    @if $icon != false {
        &:before {
            content : $icon;
        }
    }
}

@mixin documentation-type($name, $color, $icon) {
    .c-#{$name} {
        &-link {
            color         : $color;
            padding       : 1px 5px;
            background    : transparent; //rgba($color, 0.25);
            border-bottom : 1px solid rgba($color, 0.35);
            &:hover, &:focus {
                color      : darken($color, 10);
                background : rgba($color, 0.35);
            }
        }

        &-icon {
            color : $color;
            @include c-icon($icon)
        }
        @content
    }
}
@import "button-mixins";

@mixin font-face(
    $font-family,
    $file-path,
    $file-formats,
    $font-weight: normal,
    $font-style: normal
) {
    @font-face {
        font-family: $font-family;
        font-weight: $font-weight;
        font-style: $font-style;

        src: font-source-declaration(
                $font-family,
                $file-path,
                $file-formats
        );

        @content;
    }
}

//noinspection CssInvalidFunction
@function font-source-declaration($font-family, $file-path, $file-formats) {
    $src: ();

    $formats-map: (
        eot:   "#{$file-path}.eot?#iefix" format("embedded-opentype"),
        woff2: "#{$file-path}.woff2" format("woff2"),
        woff:  "#{$file-path}.woff" format("woff"),
        ttf:   "#{$file-path}.ttf" format("truetype"),
        svg:   "#{$file-path}.svg##{$font-family}" format("svg"),
    );

    @each $key, $values in $formats-map {
        @if list-contains($file-formats, $key) {
            $file-path: nth($values, 1);
            $font-format: nth($values, 2);

            $src: append($src, url($file-path) $font-format, comma);
        }
    }

    @return $src;
}

// Returns true if `$list` contains any of `$values`.
@function list-contains($list, $values...) {
    @each $value in $values {
        @if type-of(index($list, $value)) != "number" {
            @return false;
        }
    }

    @return true;
}
